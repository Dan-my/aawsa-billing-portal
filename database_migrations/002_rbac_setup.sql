-- Create roles table
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE roles IS 'Stores user roles for role-based access control.';

-- Create permissions table
CREATE TABLE permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    category TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE permissions IS 'Stores individual permissions that can be assigned to roles.';
COMMENT ON COLUMN permissions.category IS 'A category for grouping permissions in the UI, e.g., "User Management".';

-- Create role_permissions join table
CREATE TABLE role_permissions (
    role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permission_id BIGINT NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id),
    created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE role_permissions IS 'Links roles to their assigned permissions.';

-- Create the RPC function to securely update permissions
CREATE OR REPLACE FUNCTION update_role_permissions(p_role_id BIGINT, p_permission_ids BIGINT[])
RETURNS void AS $$
BEGIN
    -- Use the security context of the function definer (the admin who creates it)
    -- This is crucial for allowing updates to tables where the calling user might not have direct access.
    
    -- Remove old permissions for the role within a transaction
    DELETE FROM public.role_permissions WHERE role_id = p_role_id;

    -- Add new permissions for the role if any are provided
    IF array_length(p_permission_ids, 1) > 0 THEN
        INSERT INTO public.role_permissions (role_id, permission_id)
        SELECT p_role_id, unnest(p_permission_ids);
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
COMMENT ON FUNCTION update_role_permissions IS 'Transactionally updates the permissions for a given role.';


-- Insert default roles
INSERT INTO roles (role_name, description) VALUES
('Admin', 'Full access to all system features and settings.'),
('Staff', 'Access limited to managing data within their assigned branch.'),
('Head Office Management', 'Read-only access to all data and full access to reporting.'),
('Staff Management', 'Manages staff and branches, plus standard staff duties.');

-- Insert permissions
INSERT INTO permissions (name, category, description) VALUES
-- Dashboard
('dashboard_view_all', 'Dashboard', 'View dashboard with data from all branches'),
('dashboard_view_branch', 'Dashboard', 'View dashboard with data limited to assigned branch'),

-- Branch Management
('branches_view', 'Branch Management', 'View all branches'),
('branches_create', 'Branch Management', 'Create new branches'),
('branches_update', 'Branch Management', 'Update existing branches'),
('branches_delete', 'Branch Management', 'Delete branches'),

-- Staff Management
('staff_view', 'Staff Management', 'View all staff members'),
('staff_create', 'Staff Management', 'Create new staff members'),
('staff_update', 'Staff Management', 'Update staff member details and roles'),
('staff_delete', 'Staff Management', 'Delete staff members'),

-- Notifications
('notifications_view', 'Notifications', 'View sent notification history'),
('notifications_create', 'Notifications', 'Send notifications to staff'),

-- Tariff Management
('tariffs_view', 'Tariff Management', 'View tariff rates and settings'),
('tariffs_update', 'Tariff Management', 'Update tariff rates and settings'),

-- Bulk Meter Management
('bulk_meters_view_all', 'Bulk Meter Management', 'View all bulk meters across all branches'),
('bulk_meters_view_branch', 'Bulk Meter Management', 'View bulk meters within assigned branch'),
('bulk_meters_create', 'Bulk Meter Management', 'Create new bulk meters'),
('bulk_meters_update', 'Bulk Meter Management', 'Update existing bulk meters'),
('bulk_meters_delete', 'Bulk Meter Management', 'Delete bulk meters'),

-- Individual Customer Management
('customers_view_all', 'Customer Management', 'View all customers across all branches'),
('customers_view_branch', 'Customer Management', 'View customers within assigned branch'),
('customers_create', 'Customer Management', 'Create new customers'),
('customers_update', 'Customer Management', 'Update existing customers'),
('customers_delete', 'Customer Management', 'Delete customers'),

-- Data Entry & Readings
('data_entry_access', 'Data Entry', 'Access the data entry forms (manual and CSV)'),
('meter_readings_view_all', 'Meter Readings', 'View all meter readings across all branches'),
('meter_readings_view_branch', 'Meter Readings', 'View meter readings within assigned branch'),
('meter_readings_create', 'Meter Readings', 'Add new meter readings'),

-- Reports
('reports_generate_all', 'Reporting', 'Generate and download reports for all branches'),
('reports_generate_branch', 'Reporting', 'Generate and download reports for assigned branch'),

-- System Settings
('settings_view', 'System Settings', 'View application settings'),
('settings_update', 'System Settings', 'Update application settings'),

-- Permissions Management (Admin only)
('permissions_view', 'Permissions', 'View roles and permissions'),
('permissions_update', 'Permissions', 'Update role permissions');

-- Assign permissions to roles
DO $$
DECLARE
    admin_role_id BIGINT;
    staff_role_id BIGINT;
    head_office_role_id BIGINT;
    staff_mgmt_role_id BIGINT;
BEGIN
    -- Get role IDs
    SELECT id INTO admin_role_id FROM roles WHERE role_name = 'Admin';
    SELECT id INTO staff_role_id FROM roles WHERE role_name = 'Staff';
    SELECT id INTO head_office_role_id FROM roles WHERE role_name = 'Head Office Management';
    SELECT id INTO staff_mgmt_role_id FROM roles WHERE role_name = 'Staff Management';

    -- Assign all permissions to Admin
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT admin_role_id, id FROM permissions;

    -- Assign permissions for Staff
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT staff_role_id, id FROM permissions WHERE name IN (
        'dashboard_view_branch',
        'bulk_meters_view_branch',
        'bulk_meters_create',
        'bulk_meters_update',
        'bulk_meters_delete',
        'customers_view_branch',
        'customers_create',
        'customers_update',
        'customers_delete',
        'data_entry_access',
        'meter_readings_view_branch',
        'meter_readings_create',
        'reports_generate_branch'
    );

    -- Assign permissions for Head Office Management (View all + reports)
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT head_office_role_id, id FROM permissions WHERE name IN (
        'dashboard_view_all',
        'branches_view',
        'staff_view',
        'notifications_view',
        'tariffs_view',
        'bulk_meters_view_all',
        'customers_view_all',
        'meter_readings_view_all',
        'reports_generate_all',
        'settings_view'
    );
    
    -- Assign permissions for Staff Management (Staff perms + user/branch mgmt)
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT staff_mgmt_role_id, id FROM permissions WHERE name IN (
        -- Standard staff permissions
        'dashboard_view_branch',
        'bulk_meters_view_branch',
        'bulk_meters_create',
        'bulk_meters_update',
        'bulk_meters_delete',
        'customers_view_branch',
        'customers_create',
        'customers_update',
        'customers_delete',
        'data_entry_access',
        'meter_readings_view_branch',
        'meter_readings_create',
        'reports_generate_branch',
        -- Management permissions
        'branches_view',
        'branches_create',
        'branches_update',
        'staff_view',
        'staff_create',
        'staff_update',
        'staff_delete',
        'notifications_create',
        'notifications_view'
    );
END $$;
