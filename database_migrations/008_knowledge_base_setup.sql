-- Create the table for knowledge base articles
CREATE TABLE IF NOT EXISTS public.knowledge_base_articles (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    title text not null,
    content text not null,
    category text,
    keywords text[]
);

-- Enable Row Level Security
ALTER TABLE public.knowledge_base_articles ENABLE ROW LEVEL SECURITY;

-- Create policies for knowledge_base_articles
-- Allow admin users to perform all operations
CREATE POLICY "Allow admin full access on knowledge base"
ON public.knowledge_base_articles
FOR ALL
TO authenticated
USING (
  (SELECT role FROM public.staff_members WHERE id = auth.uid()) = 'Admin'
);

-- Allow authenticated users to read all articles (for the chatbot)
CREATE POLICY "Allow authenticated users to read knowledge base"
ON public.knowledge_base_articles
FOR SELECT
TO authenticated
USING (true);


-- Add a new permission for managing the knowledge base
INSERT INTO public.permissions (name, description, category)
VALUES ('knowledge_base_manage', 'Can create, edit, and delete knowledge base articles', 'Management')
ON CONFLICT (name) DO NOTHING;

-- Assign the new permission to the Admin and Staff Management roles
DO $$
DECLARE
    v_admin_role_id int;
    v_staff_mgmt_role_id int;
    v_kb_permission_id int;
BEGIN
    -- Get IDs for roles
    SELECT id INTO v_admin_role_id FROM public.roles WHERE role_name = 'Admin';
    SELECT id INTO v_staff_mgmt_role_id FROM public.roles WHERE role_name = 'Staff Management';
    
    -- Get ID for the new permission
    SELECT id INTO v_kb_permission_id FROM public.permissions WHERE name = 'knowledge_base_manage';
    
    -- Assign permission to Admin role if it exists
    IF v_admin_role_id IS NOT NULL AND v_kb_permission_id IS NOT NULL THEN
        INSERT INTO public.role_permissions (role_id, permission_id)
        VALUES (v_admin_role_id, v_kb_permission_id)
        ON CONFLICT (role_id, permission_id) DO NOTHING;
    END IF;
    
    -- Assign permission to Staff Management role if it exists
    IF v_staff_mgmt_role_id IS NOT NULL AND v_kb_permission_id IS NOT NULL THEN
        INSERT INTO public.role_permissions (role_id, permission_id)
        VALUES (v_staff_mgmt_role_id, v_kb_permission_id)
        ON CONFLICT (role_id, permission_id) DO NOTHING;
    END IF;
END;
$$;
