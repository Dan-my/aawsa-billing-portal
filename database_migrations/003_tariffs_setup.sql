-- Creates the tariffs table and seeds it with initial data.
-- This script is idempotent and can be run multiple times safely.

-- 1. Create the tariffs table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.tariffs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_type TEXT NOT NULL,
    year INTEGER NOT NULL,
    tiers JSONB NOT NULL,
    maintenance_percentage REAL NOT NULL,
    sanitation_percentage REAL NOT NULL,
    sewerage_rate_per_m3 REAL NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT tariffs_customer_type_year_key UNIQUE (customer_type, year)
);

-- 2. Enable Row Level Security (RLS)
ALTER TABLE public.tariffs ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies
-- Allow public read-only access to all tariffs.
DROP POLICY IF EXISTS "allow_public_read_access_on_tariffs" ON public.tariffs;
CREATE POLICY "allow_public_read_access_on_tariffs" ON public.tariffs
FOR SELECT USING (true);

-- Allow admins full access to manage tariffs.
DROP POLICY IF EXISTS "allow_admin_full_access_on_tariffs" ON public.tariffs;
CREATE POLICY "allow_admin_full_access_on_tariffs" ON public.tariffs
FOR ALL USING (public.is_admin());

-- Function to check if the current user has the 'Admin' role
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS BOOLEAN AS $$
BEGIN
    RETURN (
        SELECT EXISTS (
            SELECT 1
            FROM public.staff_members sm
            JOIN public.roles r ON sm.role_id = r.id
            WHERE sm.id = auth.uid() AND r.role_name = 'Admin'
        )
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- 4. Seed initial tariff data using a temporary table and INSERT with ON CONFLICT
DO $$
DECLARE
    -- Define correct Domestic tiers for all years
    domestic_tiers_2021 JSONB := '[{"rate": 4.50, "limit": 5}, {"rate": 5.75, "limit": 10}, {"rate": 8.00, "limit": 14}, {"rate": 10.25, "limit": 23}, {"rate": 12.50, "limit": 35}, {"rate": 14.75, "limit": 50}, {"rate": 17.00, "limit": "Infinity"}]';
    domestic_tiers_2022 JSONB := '[{"rate": 5.50, "limit": 5}, {"rate": 6.75, "limit": 10}, {"rate": 9.00, "limit": 14}, {"rate": 11.25, "limit": 23}, {"rate": 13.50, "limit": 35}, {"rate": 15.75, "limit": 50}, {"rate": 18.00, "limit": "Infinity"}]';
    domestic_tiers_2023 JSONB := '[{"rate": 7.50, "limit": 5}, {"rate": 8.75, "limit": 10}, {"rate": 11.00, "limit": 14}, {"rate": 13.25, "limit": 23}, {"rate": 15.50, "limit": 35}, {"rate": 17.75, "limit": 50}, {"rate": 20.00, "limit": "Infinity"}]';
    domestic_tiers_2024 JSONB := '[{"rate": 10.00, "limit": 7}, {"rate": 12.00, "limit": 18}, {"rate": 15.00, "limit": 30}, {"rate": 18.00, "limit": 40}, {"rate": 22.00, "limit": 50}, {"rate": 25.00, "limit": 60}, {"rate": 30.00, "limit": "Infinity"}]';
    domestic_tiers_2025 JSONB := '[{"rate": 10.00, "limit": 7}, {"rate": 12.00, "limit": 18}, {"rate": 15.00, "limit": 30}, {"rate": 18.00, "limit": 40}, {"rate": 22.00, "limit": 50}, {"rate": 25.00, "limit": 60}, {"rate": 30.00, "limit": "Infinity"}]';

    -- Define correct Non-domestic tiers for all years using the provided rates
    non_domestic_tiers_2021 JSONB := '[{"rate": 10.21, "limit": 7}, {"rate": 17.87, "limit": 18}, {"rate": 33.19, "limit": 30}, {"rate": 51.07, "limit": 40}, {"rate": 61.28, "limit": 50}, {"rate": 71.49, "limit": 60}, {"rate": 81.71, "limit": "Infinity"}]';
    non_domestic_tiers_2022 JSONB := '[{"rate": 10.21, "limit": 7}, {"rate": 17.87, "limit": 18}, {"rate": 33.19, "limit": 30}, {"rate": 51.07, "limit": 40}, {"rate": 61.28, "limit": 50}, {"rate": 71.49, "limit": 60}, {"rate": 81.71, "limit": "Infinity"}]';
    non_domestic_tiers_2023 JSONB := '[{"rate": 10.21, "limit": 7}, {"rate": 17.87, "limit": 18}, {"rate": 33.19, "limit": 30}, {"rate": 51.07, "limit": 40}, {"rate": 61.28, "limit": 50}, {"rate": 71.49, "limit": 60}, {"rate": 81.71, "limit": "Infinity"}]';
    non_domestic_tiers_2024 JSONB := '[{"rate": 10.21, "limit": 7}, {"rate": 17.87, "limit": 18}, {"rate": 33.19, "limit": 30}, {"rate": 51.07, "limit": 40}, {"rate": 61.28, "limit": 50}, {"rate": 71.49, "limit": 60}, {"rate": 81.71, "limit": "Infinity"}]';
    non_domestic_tiers_2025 JSONB := '[{"rate": 10.21, "limit": 7}, {"rate": 17.87, "limit": 18}, {"rate": 33.19, "limit": 30}, {"rate": 51.07, "limit": 40}, {"rate": 61.28, "limit": 50}, {"rate": 71.49, "limit": 60}, {"rate": 81.71, "limit": "Infinity"}]';
    
    -- Define common fees and rates
    domestic_sewerage_rate REAL := 6.25;
    non_domestic_sewerage_rate REAL := 7.50;

BEGIN
    -- Create a temporary table for seeding
    CREATE TEMP TABLE temp_tariffs (
        customer_type TEXT,
        year INTEGER,
        tiers JSONB,
        maintenance_percentage REAL,
        sanitation_percentage REAL,
        sewerage_rate_per_m3 REAL
    ) ON COMMIT DROP;

    -- Insert data into the temporary table
    INSERT INTO temp_tariffs (customer_type, year, tiers, maintenance_percentage, sanitation_percentage, sewerage_rate_per_m3) VALUES
    ('Domestic', 2021, domestic_tiers_2021, 0.01, 0.07, domestic_sewerage_rate),
    ('Domestic', 2022, domestic_tiers_2022, 0.01, 0.07, domestic_sewerage_rate),
    ('Domestic', 2023, domestic_tiers_2023, 0.01, 0.07, domestic_sewerage_rate),
    ('Domestic', 2024, domestic_tiers_2024, 0.01, 0.07, domestic_sewerage_rate),
    ('Domestic', 2025, domestic_tiers_2025, 0.01, 0.07, domestic_sewerage_rate),
    ('Non-domestic', 2021, non_domestic_tiers_2021, 0.01, 0.10, non_domestic_sewerage_rate),
    ('Non-domestic', 2022, non_domestic_tiers_2022, 0.01, 0.10, non_domestic_sewerage_rate),
    ('Non-domestic', 2023, non_domestic_tiers_2023, 0.01, 0.10, non_domestic_sewerage_rate),
    ('Non-domestic', 2024, non_domestic_tiers_2024, 0.01, 0.10, non_domestic_sewerage_rate),
    ('Non-domestic', 2025, non_domestic_tiers_2025, 0.01, 0.10, non_domestic_sewerage_rate);

    -- Upsert from the temporary table into the main table
    INSERT INTO public.tariffs (customer_type, year, tiers, maintenance_percentage, sanitation_percentage, sewerage_rate_per_m3)
    SELECT customer_type, year, tiers, maintenance_percentage, sanitation_percentage, sewerage_rate_per_m3 FROM temp_tariffs
    ON CONFLICT (customer_type, year)
    DO UPDATE SET
        tiers = EXCLUDED.tiers,
        maintenance_percentage = EXCLUDED.maintenance_percentage,
        sanitation_percentage = EXCLUDED.sanitation_percentage,
        sewerage_rate_per_m3 = EXCLUDED.sewerage_rate_per_m3,
        updated_at = NOW();

END $$;
